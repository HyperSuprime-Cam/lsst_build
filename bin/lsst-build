#!/usr/bin/env python
#
# lsst-build [build|clone] <build_directory> [ref]
#

import argparse, os, getpass

from lsst.ci import PullCommand, Builder

parser = argparse.ArgumentParser(description='Build LSST Software Stack from git source',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog="""Examples:
    lsst-build clone <build_directory> [ref1 [ref2 [...]]]
    lsst-build build <build_directory>
.
""")
parser.add_argument('--work-dir', default='.', type=str, help='Initialized build directory')
parser.add_argument('--bt-dir', default=None, type=str, help='Path to .bt directory')

subparsers = parser.add_subparsers()

# Parser for the 'clone' command
parser_clone = subparsers.add_parser('pull', help='Recursively clone the package tree')
parser_clone.set_defaults(func=PullCommand.run)
parser_clone.add_argument('products', type=str, help='Top-level products to pull', nargs='*')
parser_clone.add_argument('--ref', default=[], action='append', type=str, help='An ordered list of refs to check out')
parser_clone.add_argument('--no-fetch', action='store_true', help="Don't git-fetch any products")
parser_clone.add_argument('--build-id', default=None, type=str, help='Build ID (default: autodetected from existing EUPS or git tags)')

# Parser for the 'build' command
parser_build = subparsers.add_parser('build', help='Build the source tree given the manifest')
parser_build.set_defaults(func=Builder.run)
parser_build.add_argument('products', type=str, help='Top-level products to build', nargs='*')
parser_build.add_argument('--build-id', default=None, type=str, help='Build ID (default: autodetected from existing EUPS or git tags)')

args = parser.parse_args()

args.func(args)

#parser_build.add_argument('--version-git-repo', type=str, help="Working directory of a git repository with the version database.")
#parser_build.add_argument('--sha-abbrev-len', default=10, type=int, help='Length of SHA1 commit ID abbreviation')
#parser_build.add_argument('--build-id-prefix', default=getpass.getuser(), type=str, help='Build ID prefix (default: current user, \'%s\')' % getpass.getuser())
#parser_build.add_argument('--exclusion-map', type=str, help="File with map of optional packages to exclude.")

