#!/usr/bin/env python
#
# lsst-build [build|clone] <build_directory> [ref]
#

import argparse, os

from lsst.ci import BuildDirectoryConstructor, Builder

parser = argparse.ArgumentParser(description='Build LSST Software Stack from git source',
    formatter_class=argparse.RawDescriptionHelpFormatter,
    epilog="""Examples:
    lsst-build clone <build_directory> [ref1 [ref2 [...]]]
    lsst-build build <build_directory>
.
""")
subparsers = parser.add_subparsers()

# Parser for the 'clone' command
parser_clone = subparsers.add_parser('clone', help='Recursively clone the package tree')
parser_clone.set_defaults(func=BuildDirectoryConstructor.run)
parser_clone.add_argument('build_dir', type=str, help='Build directory')
parser_clone.add_argument('products', type=str, help='Top-level products to build', nargs='+')
parser_clone.add_argument('--ref', default=[], action='append', type=str, help='An ordered list of refs to check out')
parser_clone.add_argument('--repository-pattern', default=os.environ.get("REPOSITORY_PATTERN", "git://git.lsstcorp.org/LSST/DMS/%(product).git"), type=str, help="Python pattern to source git repository ('|'-delimited; default: $REPOSITORY_PATTERN)")
parser_clone.add_argument('--sha-abbrev-len', default=10, type=int, help='Length of SHA1 commit ID abbreviation')
parser_clone.add_argument('--build-id', default=None, type=str, help='Build ID (default: autodetected from existing EUPS or git tags)')
parser_clone.add_argument('--no-fetch', action='store_true', help="Don't git-fetch any products")
parser_clone.add_argument('--exclusion-map', type=str, help="File with map of optional packages to exclude.")
parser_clone.add_argument('--version-git-repo', type=str, help="Working directory of a git repository with the version database.")

# Parser for the 'build' command
parser_clone = subparsers.add_parser('build', help='Build the source tree given the manifest')
parser_clone.set_defaults(func=Builder.run)
parser_clone.add_argument('build_dir', type=str, help="Build directory with manifest.txt built by the `clone' subcommand")

args = parser.parse_args()

args.func(args)
