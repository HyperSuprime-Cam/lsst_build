#!/usr/bin/env python
#
# lsst-build [build|prepare] <build_directory> [ref]
#

#export REPOSITORY_PATTERN="git://git.lsstcorp.org/LSST/DMS/%(product)s.git|git://git.lsstcorp.org/LSST/DMS/devenv/%(product)s.git|git://git.lsstcorp.org/personal/mjuric/eupspkg/external/%(product)s"
#export PRODUCTS="base"
#./bin/lsst-build prepare build $PRODUCTS

import argparse, os

from lsst.ci.prepare import Preparer
from lsst.ci.build import Builder

parser = argparse.ArgumentParser(description='Build LSST Software Stack from git source',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog="""Examples:
	lsst-build prepare <build_directory> [ref1 [ref2 [...]]]
	lsst-build build <build_directory>
.
""")
subparsers = parser.add_subparsers()

# Parser for the 'prepare' command
parser_prepare = subparsers.add_parser('prepare', help='Prepare the source tree for build')
parser_prepare.set_defaults(func=Preparer.run)
parser_prepare.add_argument('build_dir', type=str, help='Build directory')
parser_prepare.add_argument('products', type=str, help='Top-level products to build', nargs='+')
parser_prepare.add_argument('--ref', default=[], action='append', type=str, help='An ordered list of refs to check out')
parser_prepare.add_argument('--repository-pattern', default=os.environ.get("REPOSITORY_PATTERN", "git://git.lsstcorp.org/LSST/DMS/%(product).git"), type=str, help="Python pattern to source git repository ('|'-delimited; default: $REPOSITORY_PATTERN)")
parser_prepare.add_argument('--sha-abbrev-len', default=10, type=int, help='Length of SHA1 commit ID abbreviation')
parser_prepare.add_argument('--no-fetch', action='store_true', help="Don't git-fetch any products")
parser_prepare.add_argument('--exclusion-map', type=str, help="File with map of optional packages to exclude.")

# Parser for the 'build' command
parser_prepare = subparsers.add_parser('build', help='Build the source tree given the manifest')
parser_prepare.set_defaults(func=Builder.run)
parser_prepare.add_argument('build_dir', type=str, help='Build directory')
parser_prepare.add_argument('manifest', type=str, help='Manifest of products to build')

args = parser.parse_args()

args.func(args)
